/*
  Created by: Megan Tibbles
  File Name: cm.cup.rules
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, BOOL, INT, VOID, WHILE, RETURN;
terminal ASSIGN, EQ, LT, GT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, SEMI, LTE, GTE, NEQ, NOT, OR, AND, COMMA, LBRACK, RBRACK, LCBRACK, RCBRACK;
terminal String ID, NUM, TRUTH;
terminal ERROR;

non terminal program, dec_list, dec, var_dec, fun_dec, fun_pro, type_spec, params, param, param_list, compound_stmt, local_decs, stmt_list, stmt, expr_stmt, select_stmt, iter_stmt, return_stmt, expr, obool_expr, abool_expr, ubool_expr, simple_expr, add_expr, addop, term, relop, mulop, signed_fac, factor, var, call, args, arg_list;

/* ----------------------------Grammar Section-------------------- */
  start with program;


program          ::= dec_list 
                  ;

dec_list         ::= dec_list dec 
                  | dec 
                  ;

dec              ::= var_dec 
                  | fun_dec 
                  | fun_pro 
                  ;

var_dec          ::= type_spec ID SEMI 
                  | type_spec ID LBRACK NUM RBRACK SEMI 
                  ;

type_spec        ::= BOOL 
                  | INT 
                  | VOID 
                  ;

fun_dec          ::= type_spec ID LPAREN params RPAREN compound_stmt 
                  ;

fun_pro          ::= type_spec ID LPAREN params RPAREN SEMI 
                  ;

params           ::= param_list 
                  | VOID
                  ;

param_list          ::= param_list COMMA param 
                  | param 
                  ;

param            ::= type_spec ID 
                  | type_spec ID LBRACK RBRACK 
                  ;

compound_stmt    ::= LCBRACK local_decs stmt_list RCBRACK 
                  ;

local_decs       ::= local_decs var_dec 
                  | {: RESULT = null; :}
                  ;
                  

stmt_list        ::= stmt_list stmt 
                  | {: RESULT = null; :}
                  ;
                  

stmt             ::= expr_stmt 
                  | compound_stmt 
                  | select_stmt 
                  | iter_stmt 
                  | return_stmt 
                  ;

expr_stmt        ::= expr SEMI 
                  | SEMI 
                  ;

select_stmt      ::= IF LPAREN expr RPAREN stmt 
                  | IF LPAREN expr RPAREN stmt ELSE stmt 
                  ;

iter_stmt        ::= WHILE LPAREN expr RPAREN stmt 
                  ;

return_stmt      ::= RETURN expr SEMI 
                  | RETURN SEMI 
                  ;

expr             ::= var ASSIGN expr 
                  | obool_expr
                  ;

var              ::= ID 
                  | ID LBRACK expr RBRACK 
                  ;

obool_expr       ::= obool_expr OR abool_expr 
                  | abool_expr 
                  ;

abool_expr       ::= abool_expr AND ubool_expr 
                  | ubool_expr 
                  ;

ubool_expr       ::= NOT ubool_expr 
                  | simple_expr 
                  ;

simple_expr      ::= add_expr relop add_expr 
                  | add_expr 
                  ;

relop            ::= LTE 
                  | LT 
                  | GT 
                  | GTE 
                  | EQ 
                  | NEQ 
                  ;

add_expr         ::= add_expr addop term 
                  | term 
                  ;

addop            ::= PLUS 
                  | MINUS 
                  ;

term             ::= term mulop signed_fac 
                  | signed_fac 
                  ;

mulop            ::= TIMES 
                  | OVER 
                  ;

signed_fac       ::= MINUS signed_fac 
                  | factor 
                  ;

factor           ::= LPAREN expr RPAREN 
                  | var 
                  | call 
                  | NUM 
                  | TRUTH 
                  ;

call             ::= ID LPAREN args RPAREN 
                  ;

args             ::= arg_list 
                  | {: RESULT = null; :}
                  ;
                  

arg_list         ::= arg_list COMMA expr 
                  | expr  
                  ;   

